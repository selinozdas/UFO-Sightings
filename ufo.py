# -*- coding: utf-8 -*-
"""ufo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OZ-q65QmtnLvhfm9PxoIUJ1EOApX8wK6
"""

from google.colab import drive
drive.mount('/content/gdrive')
!ls /content/gdrive/My\ Drive/UFO

import pandas as pd
import numpy as np
import matplotlib as plt

data = pd.read_csv(r'/content/gdrive/My Drive/UFO/complete.csv',error_bad_lines=False)
data.info()

states = ["AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DC", "DE", "FL", "GA", 
          "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", 
          "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", 
          "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", 
          "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY"]

data = data.rename(columns = {'longitude ':'longitude' })
data['latitude'] = pd.to_numeric(data['latitude'], errors = 'coerce')
data['datetime'] = pd.to_datetime(data['datetime'], errors = 'coerce')
data['city'] = data['city'].str.title()
data['state'] = data['state'].str.upper()
data['country'] = data['country'].str.upper()
import re
data['city'] = data['city'].apply(lambda x: re.sub("[\(\[].*?[\)\]]", "", x))
data['city'] = data['city'].apply(lambda x: x.strip())
data.loc[(data['state'].isin(states)),'country'] = 'US'

data.insert(1,'year',data['datetime'].dt.year)
data.insert(1,'month',data['datetime'].dt.month)
data.insert(1,'day',data['datetime'].dt.day)

data = data.fillna(value=0)
data.info()

data[data['country']=='US']['state'].value_counts().head(10).plot(kind='barh', figsize=(10,5), title='States of the sightings' )

us_data = data[data['country']=='US'].copy()
gb_data = data[data['country']=='GB'].copy()
ca_data = data[data['country']=='CA'].copy()
au_data = data[data['country']=='AU'].copy()
de_data = data[data['country']=='DE'].copy()
un_data = data[data['country']==0].copy()

us_counts = us_data['city'].value_counts()
gb_counts = gb_data['city'].value_counts()
ca_counts = ca_data['city'].value_counts()
au_counts = au_data['city'].value_counts()
de_counts = de_data['city'].value_counts()
un_counts = un_data['city'].value_counts()



us_data = us_data[us_data['day']!=0]

import numpy as np
import matplotlib
import matplotlib.pyplot as plt
days = list(range(1,32))
months = ['January','February','March','April','May','June','July','August','September','October','November','December']
density = np.zeros((31,12))
for index,row in us_data.iterrows():
    density[int(row['day']-1),int(row['month']-1)]+=1

fig,ax = plt.subplots()
im = ax.imshow(density)
ax.set_xticks(np.arange(len(months)))
ax.set_yticks(np.arange(len(days)))
ax.set_xticklabels(months)
ax.set_yticklabels(days)
plt.setp(ax.get_xticklabels(), rotation=45, ha="right",
         rotation_mode="anchor")

for i in range(len(days)):
    for j in range(len(months)):
        text = ax.text(j, i, int(density[i, j]),
                       ha="center", va="center", color="w")
ax.set_title("The common days the UFO sightings are reported")
#fig.tight_layout()
fig.set_size_inches(10, 20, forward=True)
plt.show()

days = list(range(1,5))
months = ['January','February','March','April','May','June','July','August','September','October','November','December']
density = np.zeros((4,12))
for index,row in us_data.iterrows():
    if int(row['day']-1)<8:
        density[0,int(row['month']-1)]+=1
    elif int(row['day']-1)<15:
        density[1,int(row['month']-1)]+=1
    elif int(row['day']-1)<22:
        density[2,int(row['month']-1)]+=1
    else:
        density[3,int(row['month']-1)]+=1

fig,ax = plt.subplots()
im = ax.imshow(density)
ax.set_xticks(np.arange(len(months)))
ax.set_yticks(np.arange(len(days)))
ax.set_xticklabels(months)
ax.set_yticklabels(days)
plt.setp(ax.get_xticklabels(), rotation=45, ha="right",
         rotation_mode="anchor")

for i in range(len(days)):
    for j in range(len(months)):
        text = ax.text(j, i, int(density[i, j]),
                       ha="center", va="center", color="w")
ax.set_title("The common days the UFO sightings are reported")
#fig.tight_layout()
fig.set_size_inches(10, 20, forward=True)
plt.show()

import matplotlib.pyplot as plt; plt.rcdefaults()
import numpy as np
import matplotlib.pyplot as plt
winter = len(us_data[us_data['month'].isin([1,2,3])])
spring = len(us_data[us_data['month'].isin([4,5,6])])
summer = len(us_data[us_data['month'].isin([7,8,9])])
fall = len(us_data[us_data['month'].isin([10,11,12])])

objects = ('Winter','Spring','Summer','Fall')
y_pos = np.arange(len(objects))
performance = [winter,spring,summer,fall]

plt.bar(y_pos, performance, align='center', alpha=0.5, color='b')
plt.xticks(y_pos, objects)
plt.ylabel('Reports')
plt.xlabel('Seasons')
plt.title('Seasonal Sighting Information')

plt.show()

min(list(us_data['year'].unique()))

us_data[us_data['year']>1949]['year'].value_counts().sort_index().plot(kind='barh', figsize=(10,11), title='Sightings reported over years')

import matplotlib.pyplot as plt; plt.rcdefaults()
import numpy as np
import matplotlib.pyplot as plt
winter = len(us_data[us_data['month'].isin([1,2,3])])
spring = len(us_data[us_data['month'].isin([4,5,6])])
summer = len(us_data[us_data['month'].isin([7,8,9])])
fall = len(us_data[us_data['month'].isin([10,11,12])])

objects = ('Winter','Spring','Summer','Fall')
y_pos = np.arange(len(objects))
performance = [winter,spring,summer,fall]

plt.bar(y_pos, performance, align='center', alpha=0.5, color='b')
plt.xticks(y_pos, objects)
plt.ylabel('Reports')
plt.xlabel('Seasons')
plt.title('Seasonal Sighting Information')

plt.show()

us_data[(us_data['year']>1949) & (us_data['shape']!=0)]['shape'].value_counts().plot(kind='barh', figsize=(10,5), title='Shapes of the sightings' )

us_data[(us_data['year']>1949) & (us_data['shape']!=0) & (((us_data['day']==4) & (us_data['month']==7)) | ((us_data['day']==31) & (us_data['month']==12)))]['shape'].value_counts().plot(kind='barh', figsize=(10,5), title='Shapes of the sightings' )

from nltk.corpus import stopwords
sw = list(stopwords.words('english'))
us_data['comments'] = us_data['comments'].apply(lambda x : ' '.join([item for item in str(x) if item not in sw]))

pd.Series(us_data[us_data['comments']!=0]['comments'].split()).value_counts()[:50]